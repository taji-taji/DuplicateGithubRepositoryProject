#!/bin/bash
URL="https://api.github.com/graphql"

usage() {
cat << EOF
Duplicate GitHub repository Project.

Usage:
  $0 [-s] [-o] [-r] [-t] [-n] [-h]
Options:
  -o      オーナー名
  -r      リポジトリ名
  -t      GitHubアクセストークン
  -n      作成する Project の名前
  -s      複製元の Project Number (プロジェクト URL の末尾の数字)
  -h      ヘルプ
EOF
exit 1
}

if [ "$OPTIND" = 1 ]; then
  while getopts ho:r:t:n:s: OPT
  do
    case $OPT in
      h)
        usage
        ;;
      o)
        OWNER=${OPTARG}
        ;;
      r)
        REPOSITORY_NAME=${OPTARG}
        ;;
      t)
        GITHUB_TOKEN=${OPTARG}
        ;;
      n)
        NEW_PROJECT_NAME=${OPTARG}
        ;;
      s)
        SRC_PROJECT_NUMBER=${OPTARG}
        ;;
      \?)
        usage
        ;;
    esac
  done
else
  echo "No installed getopts-command." 1>&2
  exit 1
fi

request () {
  if [ -p /dev/stdin ]; then
    if [ "`echo $@`" == "" ]; then 
      __str=`cat -`
    else
      __str=$@
    fi
  else
    __str=$@
  fi
  echo $(echo "${__str}" | curl -s -H 'Content-Type: application/json' -H "Authorization: bearer ${GITHUB_TOKEN}" -X POST -d @- ${URL})
}

print_progress () {
  echo ">>>>> $1"
}

# Get Template Project
templateProjectJson=$(jq -cn '{
  query: $query,
  variables: {
    owner: $owner,
    repo: $repo,
    projectNumber: $projectNumber
  }
}' \
  --arg query 'query($owner: String!, $repo: String!, $projectNumber: Int!) {
    repository(owner: $owner, name: $repo) {
      project(number: $projectNumber) {
        id
        owner {
          id
        }
        columns(first: 10) {
          nodes {
            id
            name
            cards(first: 10) {
              nodes {
                note
              }
            }
          }
        }
      }
    }
  }' \
  --arg owner "${OWNER}" \
  --arg repo "${REPOSITORY_NAME}" \
  --argjson projectNumber "${SRC_PROJECT_NUMBER}" \
| request \
| jq -r '.data.repository.project')

sourceId=$(echo ${templateProjectJson} | jq .id)
targetOwnerId=$(echo ${templateProjectJson} | jq .owner.id)

# Create New Project
print_progress "Start creating project."
newProjectNumber=$(jq -cn '{
  query: $query,
  variables: {
    sourceId: $sourceId,
    targetOwnerId: $targetOwnerId,
    projectName: $projectName
  }
}' \
  --arg query 'mutation($sourceId: String!, $targetOwnerId: String!, $projectName: String!) {
    cloneProject(input:{
      includeWorkflows:true,
      sourceId: $sourceId,
      name: $projectName,
      targetOwnerId: $targetOwnerId
    }) {
      project {
        number
      }
    }
}' \
  --arg sourceId "${sourceId}" \
  --arg targetOwnerId "${targetOwnerId}" \
  --arg projectName "${NEW_PROJECT_NAME}" \
| request \
| jq -r '.data.cloneProject.project.number')

# Wait for the clone to complete...
sleep 3

print_progress "Project [${NEW_PROJECT_NAME}] has beed created."

# Get New Project
newProjectJson=$(jq -cn '{
  query: $query,
  variables: {
    owner: $owner,
    repo: $repo,
    projectNumber: $projectNumber
  }
}' \
  --arg query 'query($owner: String!, $repo: String!, $projectNumber: Int!) {
    repository(owner: $owner, name: $repo) {
      project(number: $projectNumber) {
        columns(first: 10) {
          nodes {
            id
            name
          }
        }
      }
    }
  }' \
  --arg owner "${OWNER}" \
  --arg repo "${REPOSITORY_NAME}" \
  --argjson projectNumber ${newProjectNumber} \
| request \
| jq -r '.data.repository.project.columns.nodes')

newColumnIds=( $(echo ${newProjectJson} | jq -r '.[].id') )

# Add Cards
for i in ${!newColumnIds[@]}; do
  columnId=${newColumnIds[$i]}
  columnName=$(echo ${newProjectJson} | jq  ".[$i].name")
  templateColumnJson=$(echo ${templateProjectJson} | jq ".columns.nodes[] | select(.name == ${columnName})")

  print_progress "Start adding cards to [${columnName}] column."

  echo ${templateColumnJson} | jq -c '.cards.nodes[].note' | \
    while read -r note; do
      jq -cn '{
        query: $query,
        variables: {
          note: $note,
          projectColumnId: $projectColumnId
        }
      }' \
        --arg query 'mutation($note: String!, $projectColumnId: String!) {
          addProjectCard(input: {
            note: $note,
            projectColumnId: $projectColumnId
          }) {
            clientMutationId
          }
        }' \
        --argjson note "${note}" \
        --arg projectColumnId "${columnId}" \
        | request  > /dev/null 2>&1
  done
  print_progress "Cards hsa been added to [${columnName}] column."
done
